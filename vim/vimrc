" Use Vim settings, instead of Vi
set nocompatible
set exrc

" --------------------------- new
" this is where I put things I'm trying out
set visualbell
set errorbells!

" --------------------------- ungrouped

let mapleader = ","
set showmode
set autoread
autocmd BufWritePre * :%s/\s\+$//e

" --------------------------- indentation

set autoindent                   " Keep the indent when creating a new line
set tabstop=4                    " Four tab spaces
set shiftwidth=2                 " Number of spaces to use in each autoindent step
set softtabstop=2                " Number of spaces to skip or insert when <BS>ing or <Tab>ing
au FileType cs set shiftwidth=4
au FileType cs set softtabstop=4
set expandtab                    " Spaces instead of tabs for better cross-editor compatibility
set smarttab                     " Use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set cindent                      " Recommended seting for automatic C-style indentation
set foldmethod=indent            " Fold based on source indentation
set foldlevelstart=99            " Expand all folds by default
set nowrap

" --------------------------- backspace behaviour

set backspace=indent,eol,start

" --------------------------- netrw settings

" give a directory-file like list view
let g:netrw_liststyle = 3

" makes the split stay on the left and open
" files to the right
let g:netrw_browse_split = 4

" use 25% for file explorer split
let g:netrw_winsize = 25

" --------------------------- search options

set incsearch
set hlsearch
set ignorecase
set smartcase

" --------------------------- text rendering options

syntax enable
set encoding=utf-8
set linebreak
set scrolloff=3
set sidescrolloff=5

" --------------------------- user interface

set wildmenu
set number
set relativenumber
set cursorline
set cursorcolumn
set ruler
set laststatus=2
set mouse=a " enable mouse for scrolling and resizing
set showcmd

" --------------------------- status bar

set statusline=%t
set statusline+=\ %m
set statusline+=\ [%r]
set statusline+=\ %y
set statusline+=\ Line\:\ %l/%L
set statusline+=\ Col\:\ %c
set statusline+=\ Percent\:\ %P

" --------------------------- swap, backup, and undo files

set directory=$HOME/.vim/swp// " store all swapfiles here
set backupdir=$HOME/.vim/backup// " store all backup files here

set undofile
set undodir=$HOME/.vim/undo// " store all undo files here

" --------------------------- commands

set history=1000

" --------------------------- vim plugins via Plug

call plug#begin('~/.vim/plugged')

Plug 'editorconfig/editorconfig-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'kien/ctrlp.vim'
Plug 'chriskempson/base16-vim'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/ReplaceWithRegister'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'sotte/presenting.vim'
Plug 'vim-scripts/AutoClose'
Plug 'w0rp/ale'

call plug#end()

" --------------------------- ale settings

let g:ale_fixers = {
\ 'typescript': ['prettier'],
\ 'elixir': ['mix_format'],
\ 'elm': ['format'],
\ 'haskell': ['brittany'],
\ 'python': ['black'],
\}

let g:ale_linters = {}
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1

" --------------------------- file type settings

au FileType gitcommit set tw=72

" --------------------------- buffers

set hidden

" cycle through prev/next buffers
map <C-K> :bprev<CR>
map <C-J> :bnext<CR>

" --------------------------- colorization

let t_Co=256
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" --------------------------- key mappings

inoremap jk <esc>
nnoremap <leader>w :execute("up")<cr>
nnoremap <leader>q <c-z>

